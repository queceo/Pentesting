#!/usr/bin/env python
import database 
import time
import subprocess
from queue import *
import unicodedata
import sys

class scanner:
        def __init__(self):

                #all the tasks we have to excecute fo the scan
                self.taskQueue = Queue(2);
                
                #database initialization
                self.DB = database.DataBase("data.db")
                self.DB.connect()


                

                try:
                        format_str = """CREATE TABLE tasklist (ID INTEGER PRIMARY KEY AUTOINCREMENT, task varchar(255))"""
                        sql_command = format_str.format()
                        self.DB.sql_exec(sql_command)
                        self.DB.connection.commit()
                except:
                        print("Tasklist exists loading")
                try:
                        format_str = """CREATE TABLE scanlist (ID INTEGER PRIMARY KEY AUTOINCREMENT, ip varchar(255), port varchar(255), added varchar(255))"""
                        sql_command = format_str.format()
                        self.DB.sql_exec(sql_command)
                        self.DB.connection.commit()
                except:
                        print("scanlist exists loading")


        def ping(self):
                scanIpList = self.get_scan_ip()
                for row in scanIpList:
                        print "Pinging: %s on %s" % (row[1],row[2]) 
                        subprocess.call(["ping",row[1],"-p",row[2],"-c","1"])

                #Add an ip to scanlist
        def add_scan_ip(self,iip, iport): 
                format_str = """INSERT INTO scanlist (id, ip, port, added)
            VALUES (NULL, "{ip}", "{port}", "{added}")"""
                sql_command = format_str.format(ip=iip, port=iport, added=time.strftime("%d/%m/%Y"))
                self.DB.sql_exec(sql_command)
                self.DB.connection.commit()
                print "IP Adress: %s port: %s added on %s" % (iip,iport,time.strftime("%d/%m/%Y"))

        #returns list with all ip's to scan
        def get_scan_ip(self):
                sql_command = """SELECT * FROM scanlist;"""
                self.DB.sql_exec(sql_command)
                return list(self.DB.cursor.fetchall())


        def delete_scan_ip(self,iid):
                format_str = """DELETE FROM scanlist WHERE id="{id}";"""
                sql_command = format_str.format(id=iid)
                self.DB.sql_exec(sql_command)
                self.DB.connection.commit();
                return list(self.DB.cursor.fetchall())

        def startQueue(self):
                scanIpList = self.get_scan_ip()
                taskList = self.getTaskList()
                for row in scanIpList:
                        ip = row[1].encode('ascii','ignore');
                        port = row[2].encode('ascii','ignore');
                        for row in taskList:
                                task = row[1].encode('ascii','ignore')
                                task = task.replace("ip",ip);
                                task = task.replace("port",port);
                        self.taskQueue.createTask(task);
                self.taskQueue.start();
                print self.taskQueue.getResults();


        #Task DB
        def addTask(self, task):
                task = ' '.join(task);
                format_str = """INSERT INTO tasklist (id, task)
                                VALUES (NULL, "{taskk}")"""
                
                sql_command = format_str.format(taskk=task)
                self.DB.sql_exec(sql_command)
                self.DB.connection.commit()
                print "Task: %s added on %s" % (task,time.strftime("%d/%m/%Y"))

        def addTaskStr(self, task):
                format_str = """INSERT INTO tasklist (id, task)
                                VALUES (NULL, "{taskk}")"""
                
                sql_command = format_str.format(taskk=task)
                self.DB.sql_exec(sql_command)
                self.DB.connection.commit()
                print "Task: %s added on %s" % (task,time.strftime("%d/%m/%Y"))

        def delTask(self, iid):
                format_str = """DELETE FROM tasklist WHERE id="{id}";"""
                sql_command = format_str.format(id=iid)
                self.DB.sql_exec(sql_command)
                self.DB.connection.commit();
                return self.getTaskList();
        
        def getTaskList(self):
                sql_command = """SELECT * FROM tasklist;"""
                self.DB.sql_exec(sql_command)
                return list(self.DB.cursor.fetchall())

